# Pipeline

Pipeline classes, appended to one another, provide a way to take a
source and lazily transform and filter that source. It is also more
efficient than the current `in` and `out` implementations in that
chaining multiple expressions together can be done without the need for
temporary collections between each chained method, and each source is
traversed only once.

This provides support for interesting traversal expressions:

    # Get and "name" the child's parents:
    luke.in(:child).as('parents').
      # Get Grandparents:
      in(:child).
      # Get Grandparents' children (which includes Luke's parents):
      out(:child).uniq.
      # Remove Luke's parents, leaving the Uncles and Aunts:
      except('parents').
      # Add the Uncles' and Aunts' spouses:
      also { |node| node.out(:spouse) }

Pipeline is inspired by Dave Thomas' 2008 articles on using Fiber to
create pipelines in Ruby<sup>[1][pipelines-one] & [2][pipelines-two]</sup>,
and the Java ["Pipes" library][pipes-library].

[pipelines-one]: http://pragdave.blogs.pragprog.com/pragdave/2007/12/pipelines-using.html
[pipelines-two]: http://pragdave.blogs.pragprog.com/pragdave/2008/01/pipelines-using.html
[pipes-library]: https://github.com/tinkerpop/pipes/wiki
